<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- Namespace를 통해 JAVA 클래스와 Annotation클래스와 동기 -->
<mapper namespace="Admin">


	<!-- ✔ 관리자 > 사용자 관리 -->
	<!-- 사용자 전체 조회 -->
	<select id="All_User_List" resultType="com.assign_manage.vo.VO_User">
	<!-- alias를 이용해 등급 명칭을 수정 -->
		select 
			case user_class
				when 0 then '관리자'
				when 1 then '교사'
				when 2 then '학생'
				else '기타'
			end as user_class,
		id,
		user_name,
		gender,
		birth,
		tel,
		email
		from user
		
		<!-- user테이블의 id컬럼의 값을 VO_User의 setId()에 저장 -->
	</select>


	<!-- ✔ 관리자 > 강의 관리 -->
	<!-- 모든 강의 조회 -->
	<!-- 강의명 교사명 정원 시작일 종료일  -->
	<select id="All_Lecture_List" resultType="com.assign_manage.vo.VO_Lecture">
	select 
		lecture.lecture_name,
		user_name as teacher_name,
		count(lecture_list.id) as current_students,
		lecture.cap as max_students,
		concat(count(lecture_list.id), '/', lecture.cap) as student_ratio,
		start_date,
		end_date
	from lecture
	left join lecture_list 
		on lecture.lecture_no = lecture_list.lecture_no
	left join user
		on lecture.teacher_id = user.id
	group by
		lecture.lecture_no,
		lecture.lecture_name,
		user.user_name,
	    lecture.cap,
	    lecture.start_date,
	    lecture.end_date
	order by
		max(lecture_list.create_date) desc
	</select>

	<!-- 강의명으로 특정 강의 조회 -->
	<select id="LecutreName_Lecture_View" resultType="com.assign_manage.vo.VO_Lecture">
	select 
		lecture.lecture_name,
		user_name as teacher_name,
		count(lecture_list.id) as current_students,
		lecture.cap as max_students,
		concat(count(lecture_list.id), '/', lecture.cap) as student_ratio,
		start_date,
		end_date
	from lecture
	left join lecture_list 
		on lecture.lecture_no = lecture_list.lecture_no
	left join user
		on lecture.teacher_id = user.id
	where
		lecture_name = #{keyword}
	group by
		lecture.lecture_no,
		lecture.lecture_name,
		user.user_name,
	    lecture.cap,
	    lecture.start_date,
	    lecture.end_date
	order by
		max(lecture_list.create_date) desc
	</select>
	
	<!-- 강의 등록 > 교사 목록 -->
	<select id="Admin_Teacher_List" resultType="com.assign_manage.vo.VO_User">
	select 
		id, 
		user_name, 
		gender 
    from 
    	user 
    where 
    	user_class = 1
	</select>

	<!-- 강의 등록 -->
	<insert id="Lecture_Create" parameterType="com.assign_manage.vo.VO_Lecture">
	INSERT INTO lecture(
		lecture_name, 
		id, 
		cap, 
		start_date,  end_date,    create_date
	)
	VALUES (
		#{lecture_name},
		#{id}, 
		#{cap},
		#{start_date},
		#{end_date},
		NOW()
	)
	</insert>
	
	<!-- 강의 수정 -->
	<update id="Lecture_Update" parameterType="com.assign_manage.vo.VO_Lecture">
		update lecture 
			set 
		lecture_name = #{lecture_name}, 
		id = #{id}, 
		cap = #{cap},
		start_date = #{start_date},
		end_date = #{end_date}
		where lecture_no = #{lecture_no}
	</update>
	
	<!-- 강의 삭제 -->
	<update id="deleteLecture" parameterType="int">
		update lecture
		set delete_date = now()
		where lecture_no = #{lecture_no}
	</update>
	
	<!-- 강의 수정 -->
	<select id="Lecture_View" resultType="com.assign_manage.vo.VO_Lecture" parameterType="int">
    SELECT 
        lecture_no,
        lecture_name,
        id,  
        cap,
        create_date,
        start_date,
        end_date
    FROM lecture
    WHERE lecture_no = #{lectureNo}
      AND delete_date IS NULL
</select>
	
	<!-- modal 이름으로 특정 교사 조회 -->
	<select id="Name_Teacher_View" resultType="com.assign_manage.vo.VO_User">
		select id, user_name, gender from user where user_class = 1 and name = #{keyword}
	</select>

	<!-- modal 전체 학생 조회 -->
	<select id="All_Student_List" resultType="com.assign_manage.vo.VO_User">
		select id, user_name, gender from user where user_class = 2
	</select>
	
	<!-- modal 이름으로 특정 학생 조회 -->
	<select id="Name_Student_View" resultType="com.assign_manage.vo.VO_User">
		select id, user_name, gender from user where user_class = 2 and name = #{keyword}
	</select>
	
	<!-- 특정 강의를 수강중인 유저와, 교수를 제외한 나머지 유저목록 -->
	<select id="selectUserNotExistsLecturListAndTeacher" 
		resultType="com.assign_manage.vo.VO_User" 
		parameterType="int">
		select 
			id, user_name, gender 
		from 
			user 
		where 
			id not in(
				select id 
				from lecture_list 
				where lecture_no = #{lectureNo}
				) 
				and user_class = 2;
	</select>
	
	<!-- 강의 관리 페이지네이션 -->
	<select id="Lecture_Managemetn_page">
	select 
		lecture.lecture_name,
		user_name as teacher_name,
		count(lecture_list.id) as current_students,
		lecture.cap as max_students,
		concat(count(lecture_list.id), '/', lecture.cap) as student_ratio,
		start_date,
		end_date
	from lecture
	left join lecture_list 
		on lecture.lecture_no = lecture_list.lecture_no
	left join user
		on lecture.teacher_id = user.id
	group by
		lecture.lecture_no,
		lecture.lecture_name,
		user.user_name,
	    lecture.cap,
	    lecture.start_date,
	    lecture.end_date
	order by
		max(lecture_list.create_date) desc
	limit 10
	</select>
	
	
</mapper>