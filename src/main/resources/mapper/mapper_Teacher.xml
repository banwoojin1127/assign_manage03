<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="teacher">

	<!-- modal 전체 교사 조회 -->
	<select id="All_Teacher_List" resultType="com.assign_manage.vo.VO_User">
		select id, user_name, gender from user where user_class = 1
	</select>
	
    <!-- 전체 강의 조회 -->
    <select id="selectAllLectures" resultType="com.assign_manage.vo.VO_Lecture" parameterType="String">
    
    	<!-- select * from lecture WHERE delete_date IS null ORDER BY lecture_no --> 
    
    
    <!-- select count(*) from lecture_list where lecture_no = ? -->
    
        SELECT 
			le.*, 
			(select count(*) from lecture_list where lecture_no = le.lecture_no) as cnt,
			u.user_name
		FROM lecture le
		inner join user u on le.id = u.id
		WHERE delete_date IS null
		<!-- <if test="!value.equals('') and value != null">
        	AND lecture_name = #{value}
        </if> -->
		ORDER BY lecture_no
    </select>

    <!-- 특정 강의 과제 목록 -->
<select id="selectAssignmentsByLecture" parameterType="int" resultType="com.assign_manage.vo.VO_Assignment">
    SELECT * FROM assignment
    WHERE lecture_no = #{lecture_no}
      AND delete_date IS NULL
    ORDER BY assign_no DESC
</select>

    <!-- 특정 과제 조회 -->
    <select id="selectAssignmentByNo" parameterType="int" resultType="com.assign_manage.vo.VO_Assignment">
        SELECT * FROM assignment
        WHERE assign_no = #{assign_no}
          AND delete_date IS NULL
    </select>

    <!-- 과제 추가 -->
    <insert id="insertAssignment" parameterType="com.assign_manage.vo.VO_Assignment">
        INSERT INTO assignment
        (lecture_no, assign_name, assign_note, assign_method, create_date, end_date)
        VALUES
        (#{lecture_no}, #{assign_name}, #{assign_note}, #{assign_method}, #{create_date}, #{end_date})
    </insert>

<!-- =============================================== -->
<!-- 반우진 작업 시작부분 -->
<!-- =============================================== -->
	<!-- 사용자 전체 조회 -->
	<select id="All_Student_List" resultType="com.assign_manage.vo.VO_User">
	<!-- alias를 이용해 등급 명칭을 수정 -->
		select 
			case user_class
				when 0 then '관리자'
				when 1 then '교사'
				when 2 then '학생'
				else '기타'
			end as user_class,
		id,
		user_name,
		gender,
		birth,
		tel,
		email
		from user
		where user_class = 2;
		<!-- user테이블의 id컬럼의 값을 VO_User의 setId()에 저장 -->
	</select>
	
	<select id="selectListUser" 
		parameterType="com.assign_manage.vo.VO_SearchFilter_AllStudent"
		resultType="com.assign_manage.vo.VO_User">
        SELECT
            *
        FROM
            user
        WHERE
        	user_class = 2 
            <if test="filter != null and filter != '' and q != null and q != '' and filter != 'all'">
            	AND 
                <choose>
                    <when test="filter == 'class'">
                         user_class LIKE CONCAT('%', #{q}, '%')
                    </when>
                    <when test="filter == 'id'">
                         id LIKE CONCAT('%', #{q}, '%')
                    </when>
                    <when test="filter == 'user_name'">
                         user_name LIKE CONCAT('%', #{q}, '%')
                    </when>
                    <when test="filter == 'gender'">
                         gender = #{q} </when>
                </choose>
            </if>
            <if test="filter == 'all'">
            	AND ( 
            		user_class LIKE CONCAT('%', #{q}, '%')
           		 OR 
           		 	id LIKE CONCAT('%', #{q}, '%')
      		 	 OR
      		 	 	user_name LIKE CONCAT('%', #{q}, '%')
      		 	 OR
      		 	 	gender = #{q}
           		 )
            </if>

        <if test="sort != null and sort != ''">
            ORDER BY
            <choose>
                <when test="sort == '번호(오름차순)'"> join_date ASC </when>
                <when test="sort == '번호(내림차순)'"> join_date DESC </when>

                <when test="sort == '등급순(높은순)'"> user_class DESC </when>
                <when test="sort == '등급순(낮은순)'"> user_class ASC </when>

                <when test="sort == '생년월일(오름차순)'"> birth ASC </when>
                <when test="sort == '생년월일(내림차순)'"> birth DESC </when>

                <when test="sort == '이름(오름차순)'"> user_name ASC </when>
                <when test="sort == '이름(내림차순)'"> user_name DESC </when>

                <when test="sort == '아이디(오름차순)'"> id ASC </when>
                <when test="sort == '아이디(내림차순)'"> id DESC </when>

                <otherwise> join_date DESC </otherwise>
            </choose>
        </if>
        <if test="sort == null or sort == ''">
            ORDER BY join_date DESC </if>
        <if test="pageSize != null and offset != null">
            LIMIT #{offset}, #{pageSize}
        </if>
        </select>
        
        <!-- 학생의 강의 조회 -->
        <select id="theylecture" parameterType="java.lang.String"
        	resultType="com.assign_manage.vo.VO_Lecture_list">
        	select * 
        	from lecture_list
        	where id = #{id} and delete_date is null
        </select>
        
        <!-- 학생의 강의를 조회하고 강의명을 가져오기 -->
        <select id="theyLectureName" parameterType="java.lang.String"
        	resultType="com.assign_manage.vo.VO_Lecture">
		    SELECT
		        l.*
		    FROM 
		        lecture l
		    JOIN 
		        lecture_list ll ON l.lecture_no = ll.lecture_no
		    WHERE 
		        ll.id = #{id} and ll.delete_date is null
		</select>
<!-- =============================================== -->
<!-- 반우진 작업 끝 부분 -->
<!-- =============================================== -->

<!-- =============================================== -->
<!-- 이승헌 작업 시작부분 -->
<!-- =============================================== -->
		<select id="assign_view" parameterType="java.lang.String" 
			resultType="com.assign_manage.vo.VO_Assignment">
			select 
				a.assign_no, a.lecture_no, a.assign_name, a.assign_note, a.assign_method,
				a.end_date, l.lecture_name as lecture_name, u.user_name as teacher_name 
			from assignment a
			join lecture l on a.lecture_no = l.lecture_no
			join user u on l.id = u.id
			where assign_no = #{ assign_no }
		</select>
		
		<select id="report_view" parameterType="java.lang.String" 
			resultType="com.assign_manage.vo.VO_Report">
			select 
				r.report_no, r.assign_no, r.id, r.report_note, r.create_date, r.delete_date, 
				a.assign_name, l.lecture_name, u1.user_name as student_name, u2.user_name as teacher_name
			from report r
			left join assignment a on r.assign_no = a.assign_no
			left join lecture l on a.lecture_no = l.lecture_no
			left join user u1 on r.id = u1.id
			left join user u2 on l.id = u2.id
			where report_no = #{ report_no }
		</select>
		
		<select id="file_view" parameterType="java.lang.String" 
			resultType="com.assign_manage.vo.VO_File">
			select 
				file_no, report_no, p_name, f_name, create_date, delete_date, file_size, extension, file_path
			from file
			where file_no = #{ file_no }
		</select>
		
		<select id="file_list" parameterType="java.lang.String" 
			resultType="com.assign_manage.vo.VO_File">
			select *
			from file
			where report_no = #{ report_no }
			order by file_no asc
		</select>
		
		<select id="feedback_view" parameterType="java.lang.String" 
			resultType="com.assign_manage.vo.VO_Feedback">
			select 
				report_no, id, feedback, score
			from feedback
			where report_no = #{ report_no }
		</select>
		
		<insert id="feedback_insert" parameterType="com.assign_manage.vo.VO_Feedback">
			insert into feedback (report_no, id, feedback, score)
			values (#{ report_no }, #{ id }, #{ feedback }, #{ score })
		</insert>
		
		<update id="feedback_update" parameterType="com.assign_manage.vo.VO_Feedback">
			update feedback set
			feedback = #{ feedback }, score = #{ score } 
			where report_no = #{ report_no }
		</update>
		
		<select id="student_list" parameterType="map" 
			resultType="com.assign_manage.vo.VO_Assignment_student">
			select 
				distinct u.id, u.user_name, r.report_no, f.score
			from lecture_list l_l
			join user u on l_l.id = u.id
			left join assignment a on l_l.lecture_no = a.lecture_no
			left join report r on r.assign_no = #{ assign_no } and u.id = r.id
	    	left join feedback f on r.report_no = f.report_no
			where l_l.lecture_no = #{ lecture_no } 
			order by u.user_name asc
		</select>
		
		<select id="question_view" parameterType="java.lang.String" 
			resultType="com.assign_manage.vo.VO_Question">
			select 
				q.quest_no, q.assign_no, q.id, q.quest_note, q.create_date, q.delete_date, u.user_name as user_name
			from question q
			join user u on q.id = u.id
			where q.assign_no = #{ assign_no }
			and q.delete_date is null 
			order by q.create_date desc
		</select>
		
		<select id="answer_view" parameterType="java.lang.String" 
			resultType="com.assign_manage.vo.VO_Answer">
			select 
				a.quest_no, a.id, a.answer_note, a.create_date, a.delete_date, u.user_name as user_name
			from answer a
			left join user u on a.id = u.id
			where quest_no = #{ quest_no }
		</select>
<!-- =============================================== -->
<!-- 이승헌 작업 끝부분 -->
<!-- =============================================== -->

</mapper>
